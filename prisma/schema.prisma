// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url        = env("DATABASE_URL")
  extensions = [citext]
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  handle        String?   @unique @db.Citext
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  description   String?   @default("")
  accounts      Account[]
  sessions      Session[]
  setupComplete Boolean   @default(false)
  tweet         Tweet[]
  likes         Like[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Tweet {
  id            String   @id @default(cuid())
  text          String
  author        User?    @relation(fields: [authorId], references: [id])
  authorId      String?
  createdAt     DateTime @default(now())
  likes         Like[]
  // updatedAt DateTime @updatedAt Hehe, not yet
  parentTweetId String?
  parentTweet   Tweet?   @relation("ParentTweet", fields: [parentTweetId], references: [id])
  replies       Tweet[]  @relation("ParentTweet")
}

model Like {
  id        String   @id @default(cuid())
  tweet     Tweet    @relation(fields: [tweetId], references: [id], onDelete: Cascade)
  tweetId   String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime @default(now())

  @@unique([userId, tweetId], name: "userIdTweetId")
}
